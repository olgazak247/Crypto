+ create folders
+ colors: green, red; background black


left menu:
	+ left align 
	+ small text, that makes sense (bold/normal based on importance)
	+ the difference of the price last 24h (last 24h price difference)
	+ color (green/red) based on the last 24h price difference	
	+ add last 24h volume 
	+ add icon
	+ add chart (sparkline)
	+ fix realtime values
	+ GET /products/<product-id>/stats where "open" is open price
	
price chart:
	+ Dictionary<string, IEnumerable<Tuple<DateTime, decimal>>>
	+ refresh chart 
	
volume chart:
	+ Dictionary<string, IEnumerable<Tuple<DateTime, decimal>>>
	+ refresh chart 

+ review UI as coinbasepro
	+ colors
	+ sections
	+ data
	+ realtime

technologies:
	C#
	aync/await
	Multithreading
	Websocket
	RabbitMQ
	Web API
	SignalR
	Unit tests and Integration tests with xUnit
	framework .NET Core 3.1
	Visual Studio 2019
	ReactJS
	Redux
	Unit tests with Enzyme and Jest
	react-chartjs-2 library 
	DevExtreme React Components
	Visual Studio Code
	SQLServer
	awesomeicons
	
project description:
Design and development of a realtime multithreaded FX multicurrency monitoring dashboard. Microservices based system composed by a .NET Core websocket service receiving data streams from Coinbase as pair, ask, bid, volume, open and then storing into RabbitMQ. A .NET Core Restful WebApi service subscribing to RabbitMQ to get data streams and pushing to web frontend using SignalR. A React/Redux based frontend displaying realtime data enhanced with charts, sparklines and gauges.
- React, Redux, C#, Rest ASP.Net WebApi, Html 5, Bootstrap, CSS 3, JavaScript, SignalR, .NET Core, Websocket, Visual Studio 2019, Visual Studio Code, RabbitMQ, Enzyme, Jest, xUnit, Git, SQL Server, DevExtreme React Components, react-chartjs-2.

Displaying a realtime FX multicurrency monitoring dashboard. This dashboard displays the trend of cryptocurrencies based on Conibase Pro data enhaced with charts, gauges and sparklines. A .NET Core websocket sevice receving data stream from Coinbase Pro and storing then into RAbbitMQ. A .NET Core Restful WebApi service subscribing to RabbitMQ to get data and pushing then to frontend using SignalR. And finally, a React/Redux displaying the realtime data with charts, gauges and sparklines.



	
